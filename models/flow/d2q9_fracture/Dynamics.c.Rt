<?R
	source("conf.R") 
	c_header();
	
	source("lib/feq.R")
	source("lib/boundary.R")

# Creating variables for symbolic computations
    f = PV(Density[Density$group=='f',"name"])
    c = PV(Density[Density$group=='c',"name"])
    rho = PV("rho")
	J = PV("J",c("x","y"))
    q = PV("q",c("x","y"))
    C = PV("C")
    if ( Options$bc ) {
        BC_Velocity = PV(c('BC[0]', 'BC[1]'))
    } else {
        BC_Velocity = PV(c('VelocityX', 'VelocityY'))
    }

# Extracting velocity sets
	U = as.matrix(Density[Density$group=='f',c("dx","dy")])
    CU = as.matrix(Density[Density$group=='c',c("dx","dy")])

# Creating objects which store all MRT needed information
    # fMRT = MRT_eq(U, ortogonal=FALSE)
    # wi = subst(fMRT$Req, Jx=0, Jy=0, Jz=0)
    # wi = subst(wi, rho=1)
    # wi = gapply(wi,function(x) x$.M, simplify=TRUE)
    # wi = wi %*% solve(fMRT$mat)
	# wi = as.vector(wi)

	# W = solve(fMRT$mat) %*% diag(1/wi) %*% solve(t(fMRT$mat))
	# i = rev(1:nrow(W))
	# H = chol(W[i,i])[i,i]
	# H = H * c(1,sqrt(3)/3,sqrt(3)/3,sqrt(2),sqrt(2),1,sqrt(6)/3,sqrt(6)/3,2)
	# B = fMRT$mat %*% t(H)
	# fMRT = MRT_eq(U, mat=B)

	fMRT = MRT_eq(U, rho, J, order=2)
    cMRT = MRT_eq(CU, C, C*q, order=2)

    # incomp_feq returns incompressible equilibrium distribution
    incomp_feq = function( d, q ) {
        weights = c(4./9., 1./9., 1./9., 1./9., 1./9., 1./36., 1./36., 1./36., 1./36.)
        c_sq = 1/3.
        weights*((q %*% t(U))*( 1/ c_sq) + ((q %*% t(U)) * (q %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(q*q)*(1/(c_sq*2)) + d)
    }
    fMRT_incomp = MRT_eq(U, rho, q, order=2)
    fMRT_incomp$feq = incomp_feq(rho,q)
    fMRT_incomp$Req = incomp_feq(rho,q) %*% fMRT_incomp$mat

# SRT concentration
    c_eq  = PV(c(paste("c_eq[",1:9,"]",sep="")))
    SC2 = PV("SC2")
?>

// -- Macroscopic quantieties getters --
CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?> ;
}

CudaDeviceFunction real_t getP(){
  return ( <?R C(sum(f)) ?> - 1.)/3.;
}
    
CudaDeviceFunction vector_t getU(){
	real_t rho = <?R C(sum(f)) ?>;
	vector_t q;
<?R C(PV(c("q.x","q.y")), f %*% U) ?>
    q.x /= rho;
	q.y /= rho;
<?R if ( Options$bc ) { ?>
    if (!IamBOUNDARY) {   
        q.x += BC[0]*0.5;
        q.y += BC[1]*0.5;
    }
<?R } ?>
    // half of the source added
    q.x += rho*GravitationX*0.5;
    q.y += rho*GravitationY*0.5;

    if ((NodeType & NODE_OBJECTIVE) == NODE_Internal) {
        real_t nu = -(S2 + 1)/(6*S2 - 6);
        real_t h2_inv = 1/(h*h);
        real_t K = rho * 12. * nu * h2_inv;  
        q.x = (q.x)/(1. + 0.5 * K) / rho;
        q.y = (q.y)/(1. + 0.5 * K) / rho; 
    }
     
    // q.x /= h;
	// q.y /= h; 
    q.z = 0.0;
	return q;
}

CudaDeviceFunction real_t getH(){
    return h;
}  

CudaDeviceFunction real_t getC(){
    real_t C = <?R C(sum(c)) ?>;

    // half of the source added
    if ((NodeType & NODE_OBJECTIVE) == NODE_Internal) {
        if(C < Saturation) {
            // real_t ReactionConstant_eff = ReactionConstant * Diffusivity * Sherwood / (Diffusivity * Sherwood + 2*ReactionConstant*h);
            real_t Q = ReactionConstant * (Saturation - C);
            C += Q;  
        }
    }

    return C;
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t q = getU();
        ret.x = sqrt(q.x*q.x + q.y*q.y);
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}

// -- Initialisation and running simulation -- 
CudaDeviceFunction void SetEquilibrum(real_t rho, real_t Jx, real_t Jy, real_t C, real_t qx, real_t qy) {
    switch (NodeType & NODE_COLLISION) {  
        case NODE_MRT:
            <?R C( f, fMRT$feq) ?>
		break;
    case NODE_IncompressibleMRT:
            <?R C( f, fMRT_incomp$feq) ?>
		break;
    }  
<?R
	C( c, cMRT$feq)
?>

<?R if ( Options$bc ) { ?>
   if ( IamBOUNDARY ) {
       BC[0] = Jx / rho;
       BC[1] = Jy / rho;
   } else {
       BC[0] = 0;
       BC[1] = 0;
   }
<?R } ?>
}

CudaDeviceFunction void Init() {
	real_t rho, qx, qy, C;
   	rho = (1+Pressure*3);
	qx = VelocityX;
    qy = VelocityY;
    C = Concentration;
    if (IamWall){
        rho = 1;
        qx = 0;
        qy = 0;
    }
	SetEquilibrum(
		rho,
		qx*rho,
		qy*rho,
        C,
		qx,
		qy
	);

    h = Height;
}

CudaDeviceFunction void InitFromFields() {
  h = Height_parameter;
}

CudaDeviceFunction void hEvolution() {
    real_t C = <?R C(sum(c)) ?>;
    real_t Q = ReactionConstant * (Saturation - C);
    h += hTimeStep*2*Q/SolidConcentration;
}

CudaDeviceFunction void Run() {
    doBC();
    doCollision();
}

CudaDeviceFunction void doBC() {
    switch (NodeType & NODE_BOUNDARY) {
        case NODE_Solid:
        case NODE_Wall:
            BounceBack();
            break;
        case NODE_EVelocity:
            EVelocity();
            break;
        case NODE_WPressure:
            WPressure();
            break;
        case NODE_WVelocity:
            WVelocity();
            break;
        case NODE_EPressure:
            EPressure();
            break;
        case NODE_NVelocity:
            NVelocity();
            break;
        case NODE_SVelocity:
            SVelocity();
            break;
        case NODE_NSymmetry:
            NSymmetry();
            break;
        case NODE_SSymmetry:
            SSymmetry();
            break;
        case NODE_WPressureWConcentration:
            WPressureWConcentration();
            break;
        case NODE_EPressureEConcentration:
            EPressureEConcentration();
            break;
    }
}

CudaDeviceFunction void doCollision() {
    switch (NodeType & NODE_COLLISION) {
        case NODE_MRT:
            CollisionMRT();
        break;
        // case NODE_IncompressibleMRT:
        //     CollisionIncompressibleMRT();
        // break;
    }

    ConcentrationCollisionSRT();
}

// -- BCs --
CudaDeviceFunction void BounceBack()
{
<?R
	if ( Options$bc ) {
		C(PV('real_t temp'), sum(f))
?>
    if ( temp !=  1+Pressure*3 ) {
        <?R C(PV(c('BC[0]', 'BC[1]')), 2.* f %*% U); ?>
    } else {
        <?R C(PV(c('BC[0]', 'BC[1]')), c(0,0) ); ?>
    }
<?R
	}
	FullBounceBack()
?>
}

CudaDeviceFunction void EVelocity()
{
<?R ZouHeRewrite(fMRT, f, c(1, 0), "velocity", BC_Velocity) ?>
}

CudaDeviceFunction void WPressure()
{
<?R ZouHeRewrite(fMRT, f, c(-1, 0), "pressure") ?>
}

CudaDeviceFunction void WVelocity()
{
<?R ZouHeRewrite(fMRT, f, c(-1, 0), "velocity", BC_Velocity) ?>
}

CudaDeviceFunction void EPressure()
{
<?R ZouHeRewrite(fMRT, f, c(1, 0), "pressure") ?>
}

CudaDeviceFunction void NVelocity()
{
<?R ZouHeRewrite(fMRT, f, c(0,1), "velocity", BC_Velocity) ?>
}

CudaDeviceFunction void SVelocity()
{
<?R ZouHeRewrite(fMRT, f, c(0, -1), "velocity", BC_Velocity) ?>
}

CudaDeviceFunction void NSymmetry()
{
<?R Symmetry(2,-1,'f') ?>
}

CudaDeviceFunction void SSymmetry()
{
<?R Symmetry(2,1,'f') ?>
}

CudaDeviceFunction void WPressureWConcentration()
{
<?R ZouHeRewrite(fMRT, f, c(-1, 0), "pressure") ?>
//d2q5
// c[1] = Concentration - c[0] - c[2] - c[3] - c[4];
//d2q9
  real_t C = 6.*( Concentration - (c[0] + c[2] + c[4] + c[3] + c[7] + c[6]) );
  c[1] = (1./9.) * C;
  c[5] = (1./36.) * C;
  c[8] = (1./36.) * C;
}

CudaDeviceFunction void EPressureEConcentration()
{
<?R ZouHeRewrite(fMRT, f, c(1, 0), "pressure") ?>
//d2q5
// c[3] = Concentration - c[0] - c[1] - c[2] - c[4];
//d2q9
  real_t C = 6.*( Concentration - ( c[0] + c[2] + c[4] + c[1] + c[5] + c[8] ) );
  c[3] = (1./ 9.) * C;
  c[7] = (1./36.) * C;
  c[6] = (1./36.) * C;
}

// -- Colision and streaming --
CudaDeviceFunction void CollisionMRT()
{
<?R
	R = PV("R", 1:nrow(U)-1);
	selR = fMRT$order > 1
	R[!selR] = fMRT$Req[!selR]
?>
	real_t <?R C(R,sep=",") ?>;
    real_t Usq=0;
    real_t omega_odd = 2.*(1.+S2)/((1.-S2)*(4.*MagicNumber-1.)+2.);
    real_t S_odd = 1. - omega_odd;
<?R
    S=PV("S",1:nrow(U)-1);
	S[fMRT$order == 2] = PV("S2")
	S[fMRT$order == 3] = PV("S_odd")
 	S[fMRT$order == 4] = PV("S2")   
	C( R, f %*% fMRT$mat );
?>

    switch (NodeType & NODE_OBJECTIVE) {
        case NODE_Outlet:
<?R 
            Usq=PV('Usq')
            C(Usq,sum(J%*%J) * rho ^-2)
?>
            AddToOutletFlux(Jx/rho/rho);
            AddToPressureLoss(-(Jx/rho)/rho*((rho-1.)/3. + Usq/rho/2.));
        break;
        case NODE_Inlet:
<?R
            Usq=PV('Usq')
            C(Usq,sum(J%*%J) * rho ^-2)
?>
           AddToInletFlux(Jx/rho/rho);
           AddToPressureLoss((Jx/rho)/rho*((rho-1.)/3. + Usq/rho/2.));
       break;
    }

<?R
	C( R[selR], (R - fMRT$Req)[selR]);
	C( R[selR], (R * S)[selR]);
?>

<?R if ( Options$bc ) { ?>
    if (!IamBOUNDARY) {
        Jx = Jx + (GravitationX +  BC[0])*rho ;
        Jy = Jy + (GravitationY +  BC[1])*rho ; 
    }
<?R } else { ?>
    real_t dJx =  h*GravitationX*rho ;
    real_t dJy =  h*GravitationY*rho ; 
<?R } ?>

    if ((NodeType & NODE_OBJECTIVE) == NODE_Internal) {
        real_t nu = -(S2 + 1)/(6*S2 - 6);
        real_t h2_inv = 1/(h*h);
        real_t K = rho * 12. * nu * h2_inv;  
        Jx = Jx + dJx - K*(Jx+dJx*0.5)/(1. + 0.5 * K) / rho;
        Jy = Jy + dJy - K*(Jy+dJy*0.5)/(1. + 0.5 * K) / rho;    
    } else {
        Jx += dJx;
        Jy += dJy;
    }
<?R
    C( R[selR], (R + fMRT$Req)[selR])
	C( f, R %*% solve(fMRT$mat), float=F)
?>
}

CudaDeviceFunction void ConcentrationCollisionSRT() {
    real_t C = <?R C(sum(c)) ?>;
    real_t qx, qy;
    qx =  f[8]-f[7]-f[6]+f[5]-f[3]+f[1];
	qy = -f[8]-f[7]+f[6]+f[5]-f[4]+f[2]; 

    real_t c_eq[9];
    <?R C( c_eq, cMRT$feq) ?>
    <?R C( c, c + (1 - SC2)*(c_eq - c)) ?>

    if ((NodeType & NODE_OBJECTIVE) == NODE_Internal) {
        if(C < Saturation) {
            // real_t ReactionConstant_eff = ReactionConstant * Diffusivity * Sherwood / (Diffusivity * Sherwood + 2*ReactionConstant*h);
            real_t Q = ReactionConstant * (Saturation - C);
            c[0] += 2*Q * 4./9.;
            c[1] += 2*Q * 1./9;
            c[2] += 2*Q * 1./9.;
            c[3] += 2*Q * 1./9.;
            c[4] += 2*Q * 1./9.;
            c[5] += 2*Q * 1./36.;
            c[6] += 2*Q * 1./36.;
            c[7] += 2*Q * 1./36.;
            c[8] += 2*Q * 1./36.;
            // h += 2*Q/SolidConcentration;
        } else {
            c[0] = Saturation * 4./9.;
            c[1] = Saturation * 1./9;
            c[2] = Saturation * 1./9.;
            c[3] = Saturation * 1./9.;
            c[4] = Saturation * 1./9.;
            c[5] = Saturation * 1./36.;
            c[6] = Saturation * 1./36.;
            c[7] = Saturation * 1./36.;
            c[8] = Saturation * 1./36.;
        }
    }
}