<?R
  source("conf.R") 
  c_header();
  
  source("lib/feq.R")
  source("lib/boundary.R")

  U = as.matrix(Density[Density$group=='f',c("dx","dy")])

  fMRT = MRT_eq(U, ortogonal=FALSE)
  wi = subst(fMRT$Req, Jx=0, Jy=0, Jz=0)
  wi = subst(wi, rho=1)
  wi = gapply(wi,function(x) x$.M, simplify=TRUE)
  wi = wi %*% solve(fMRT$mat)
  wi = as.vector(wi)

  W = solve(fMRT$mat) %*% diag(1/wi) %*% solve(t(fMRT$mat))
  i = rev(1:nrow(W))
  H = chol(W[i,i])[i,i]
  H = H * c(1,sqrt(3)/3,sqrt(3)/3,sqrt(2),sqrt(2),1,sqrt(6)/3,sqrt(6)/3,2)
  B = fMRT$mat %*% t(H)

  fMRT = MRT_eq(U, mat=B)

  f = PV(Density[Density$group=='f',"name"])
  rho = PV("rho")
  J = PV("J",c("x","y"))

  CU = as.matrix(Density[Density$group=='c',c("dx","dy")])
    
  c = PV(Density[Density$group=='c',"name"])
  C = PV("C")
  JC = PV("JC",c("x","y"))
  
  cMRT = MRT_eq(CU, C, JC, order=2)

  BC_Velocity=PV(c('VelocityX', 'VelocityY'))
?>

CudaDeviceFunction void Init() {
  real_t rho = (1 + Pressure*3);
  real_t C = Concentration;
  vector_t u;
  u.x = VelocityX;
  u.y = VelocityY;

  SetEquilibrum_f(rho, rho*u.x, rho*u.y);
  SetEquilibrum_c(C, C*u.x, C*u.y);

  h = Height; 
}

CudaDeviceFunction void InitFromFields() {
  h = Height_parameter;
}

CudaDeviceFunction void Run() {
  switch (NodeType & NODE_BOUNDARY) {
    case NODE_Solid:
    case NODE_Wall:
      BounceBack();
      break;
    case NODE_EVelocity:
      EVelocity();
      break;
    case NODE_WPressure:
      WPressure();
      break;
    case NODE_WPressureWConcentration:
      WPressureWConcentration();
      break;
    case NODE_WVelocity:
      WVelocity();
      break;
    case NODE_WVelocityWConcentration:
      WVelocityWConcentration();
      break;
    case NODE_EPressure:
      EPressure();
      break;
    case NODE_EPressureEConcentration:
      EPressureEConcentration();
      break;
    case NODE_NVelocity:
      NVelocity();
      break;
    case NODE_SVelocity:
      SVelocity();
      break;
    case NODE_NSymmetry:
      NSymmetry();
      break;
    case NODE_SSymmetry:
      SSymmetry();
      break;
  }
  switch (NodeType & NODE_COLLISION)
  {
    case NODE_MRT:
      CollisionMRT();
      break;
    case NODE_IncompressibleSRT:
      CollisionIncompressibleSRT();
      break;
  }
}

CudaDeviceFunction void SetEquilibrum_f(real_t rho, real_t Jx, real_t Jy)
{
<?R
  C(f, fMRT$feq)
?>
}

CudaDeviceFunction void SetEquilibrum_c(real_t C, real_t JCx, real_t JCy)
{
<?R
  C(c, cMRT$feq)
?>
}

CudaDeviceFunction void SetIncompressibleEquilibrium(real_t phi[9], real_t Phi, vector_t u){
  phi[0] = ( 2*Phi + ( -u.y*u.y - u.x*u.x )*3. )*2./9.;
  phi[1] = ( 2*Phi + ( -u.y*u.y + ( 1 + u.x )*u.x*2. )*3. )/18.;
  phi[2] = ( 2*Phi + ( -u.x*u.x + ( 1 + u.y )*u.y*2. )*3. )/18.;
  phi[3] = ( 2*Phi + ( -u.y*u.y + ( -1 + u.x )*u.x*2. )*3. )/18.;
  phi[4] = ( 2*Phi + ( -u.x*u.x + ( -1 + u.y )*u.y*2. )*3. )/18.;
  phi[5] = ( Phi + ( ( 1 + u.y )*u.y + ( 1 + u.x + u.y*3. )*u.x )*3. )/36.;
  phi[6] = ( Phi + ( ( 1 + u.y )*u.y + ( -1 + u.x - u.y*3. )*u.x )*3. )/36.;
  phi[7] = ( Phi + ( ( -1 + u.y )*u.y + ( -1 + u.x + u.y*3. )*u.x )*3. )/36.;
  phi[8] = ( Phi + ( ( -1 + u.y )*u.y + ( 1 + u.x - u.y*3. )*u.x )*3. )/36.;
}

CudaDeviceFunction void SetEquilibrium(real_t phi[9], real_t Phi, vector_t u){
  phi[0] = ( 2. + ( -u.y*u.y - u.x*u.x )*3. )*Phi*2./9.;
  phi[1] = ( 2. + ( -u.y*u.y + ( 1 + u.x )*u.x*2. )*3. )*Phi/18.;
  phi[2] = ( 2. + ( -u.x*u.x + ( 1 + u.y )*u.y*2. )*3. )*Phi/18.;
  phi[3] = ( 2. + ( -u.y*u.y + ( -1 + u.x )*u.x*2. )*3. )*Phi/18.;
  phi[4] = ( 2. + ( -u.x*u.x + ( -1 + u.y )*u.y*2. )*3. )*Phi/18.;
  phi[5] = ( 1. + ( ( 1 + u.y )*u.y + ( 1 + u.x + u.y*3. )*u.x )*3. )*Phi/36.;
  phi[6] = ( 1. + ( ( 1 + u.y )*u.y + ( -1 + u.x - u.y*3. )*u.x )*3. )*Phi/36.;
  phi[7] = ( 1. + ( ( -1 + u.y )*u.y + ( -1 + u.x + u.y*3. )*u.x )*3. )*Phi/36.;
  phi[8] = ( 1. + ( ( -1 + u.y )*u.y + ( 1 + u.x - u.y*3. )*u.x )*3. )*Phi/36.;
}

CudaDeviceFunction void BounceBack()
{
<?R FullBounceBack() ?>
}

CudaDeviceFunction void EVelocity()
{
<?R ZouHeRewrite(fMRT, f, c(1, 0), "velocity", BC_Velocity) ?>
}

CudaDeviceFunction void WPressure()
{
<?R ZouHeRewrite(fMRT, f, c(-1, 0), "pressure") ?>
}

CudaDeviceFunction void WPressureWConcentration()
{
<?R ZouHeRewrite(fMRT, f, c(-1, 0), "pressure") ?>
//d2q5
//c[1] = Concentration - c[0] - c[2] - c[3] - c[4];
//d2q9
  real_t C = 6.*( Concentration - (c[0] + c[2] + c[4] + c[3] + c[7] + c[6]) );
  c[1] = (1./9.) * C;
  c[5] = (1./36.) * C;
  c[8] = (1./36.) * C;
}

CudaDeviceFunction void WVelocity()
{
<?R ZouHeRewrite(fMRT, f, c(-1, 0), "velocity", BC_Velocity) ?>
}

CudaDeviceFunction void WVelocityWConcentration()
{
<?R ZouHeRewrite(fMRT, f, c(-1, 0), "velocity", BC_Velocity) ?>
//d2q5
//c[1] = Concentration - c[0] - c[2] - c[3] - c[4];
//d2q9
  real_t C = 6.*( Concentration - (c[0] + c[2] + c[4] + c[3] + c[7] + c[6]) );
  c[1] = (1./9.) * C;
  c[5] = (1./36.) * C;
  c[8] = (1./36.) * C;
}

CudaDeviceFunction void EPressure()
{
<?R ZouHeRewrite(fMRT, f, c(1, 0), "pressure") ?>
}

CudaDeviceFunction void EPressureEConcentration()
{
<?R ZouHeRewrite(fMRT, f, c(1, 0), "pressure") ?>
//d2q5
//c[3] = Concentration - c[0] - c[1] - c[2] - c[4];
//d2q9
  real_t C = 6.*( Concentration - ( c[0] + c[2] + c[4] + c[1] + c[5] + c[8] ) );
  c[3] = (1./ 9.) * C;
  c[7] = (1./36.) * C;
  c[6] = (1./36.) * C;
}

CudaDeviceFunction void NVelocity()
{
<?R ZouHeRewrite(fMRT, f, c(0,1), "velocity", BC_Velocity) ?>
}

CudaDeviceFunction void SVelocity()
{
<?R ZouHeRewrite(fMRT, f, c(0, -1), "velocity", BC_Velocity) ?>
}

CudaDeviceFunction void NSymmetry()
{
<?R Symmetry(2,-1,'f') ?>
}

CudaDeviceFunction void SSymmetry()
{
<?R Symmetry(2,1,'f') ?>
}

// --- Collision operators ---

CudaDeviceFunction void CollisionIncompressibleSRT() {
  real_t d = getRho();
  vector_t u;
  u.x = (( f[8]-f[7]-f[6]+f[5]-f[3]+f[1] )/d + GravitationX/ConcentrationRelaxationRate );
  u.y = ((-f[8]-f[7]+f[6]+f[5]-f[4]+f[2] )/d + GravitationY/ConcentrationRelaxationRate );
  real_t C = getC();

  real_t phi_eq[9];
  SetIncompressibleEquilibrium(phi_eq, d, u);
  for (int i=0; i< 9; i++) {
    f[i] = f[i] + RelaxationRate*(phi_eq[i]-f[i]);	
  }
  SetEquilibrium(phi_eq, C, u);
  for (int i=0; i< 9; i++) {
    c[i] = c[i] + ConcentrationRelaxationRate*(phi_eq[i]-c[i]);	
  }
}

CudaDeviceFunction void CollisionMRT_f() {
<?R 
  MI = solve(fMRT$mat)
  P = MI %*% diag(1/wi) %*% t(MI)

  R = PV("R", 1:nrow(U)-1);
  selR = fMRT$order > 1
  R[!selR] = fMRT$Req[!selR]
?>
  
  real_t <?R C(R,sep=",") ?>;
  real_t Usq=0;

<?R
  S=PV("S",1:nrow(U)-1);
  S[fMRT$order == 2] = PV("S2")
  S[fMRT$order == 3] = PV("S3")
   S[fMRT$order == 4] = PV("S4")   
  C( R, f %*% fMRT$mat);
  C( R[selR], (R - fMRT$Req)[selR]);
  C( R[selR], (R * S)[selR]);
?>
  real_t dJx =  GravitationX*rho ;
  real_t dJy =  GravitationY*rho ; 

  real_t nu = -(S2 + 1)/(6*S2 - 6) ;
  real_t K = rho * 12. * nu / h / h;
    
  Jx = Jx + dJx - K*(Jx+dJx*0.5)/(1. + 0.5 * K) / rho;
  Jy = Jy + dJy - K*(Jy+dJy*0.5)/(1. + 0.5 * K) / rho;   

<?R
  C(R[selR], (R + fMRT$Req)[selR]);
  C(f, R %*% solve(fMRT$mat), float=F);
?>
}

CudaDeviceFunction void CollisionMRT() {
<?R 
#region first population
  MI = solve(fMRT$mat)
  P = MI %*% diag(1/wi) %*% t(MI)

  R = PV("R", 1:nrow(U)-1);
  selR = fMRT$order > 1
  R[!selR] = fMRT$Req[!selR]
?>
  
  real_t <?R C(R,sep=",") ?>;
  real_t Usq=0;

<?R
  S=PV("S",1:nrow(U)-1);
  S[fMRT$order == 2] = PV("S2")
  S[fMRT$order == 3] = PV("S3")
   S[fMRT$order == 4] = PV("S4")   
  C( R, f %*% fMRT$mat);
  C( R[selR], (R - fMRT$Req)[selR]);
  C( R[selR], (R * S)[selR]);
?>
  real_t dJx =  GravitationX*rho ;
  real_t dJy =  GravitationY*rho ; 

  real_t nu = -(S2 + 1)/(6*S2 - 6) ;
  real_t K = rho * 12. * nu / h / h;
    
  Jx = Jx + dJx - K*(Jx+dJx*0.5)/(1. + 0.5 * K) / rho;
  Jy = Jy + dJy - K*(Jy+dJy*0.5)/(1. + 0.5 * K) / rho;   

<?R
  C(R[selR], (R + fMRT$Req)[selR]);
  C(f, R %*% solve(fMRT$mat), float=F);
#endregion first population 
?>

<?R 
#region second population 
  R = PV("R", 1:nrow(CU)-1);
  selR = cMRT$order > 1
  R[!selR] = cMRT$Req[!selR]
?>
  real_t C, JCx, JCy;
  real_t omega_even = 2.*(2.-ConcentrationRelaxationRate)/(ConcentrationRelaxationRate*(4.*MagicNumber_D-1.)+2.);
  real_t SC_even = 1. - omega_even;
<?R
  S=PV("SC",1:nrow(CU)-1);
  S[cMRT$order == 1] = PV("SC_even")
  S[cMRT$order == 2] = PV("SC2")
  S[cMRT$order == 3] = PV("SC_even")
  S[cMRT$order == 4] = PV("SC2")
  C(R, c %*% cMRT$mat);
  selR = cMRT$order > 0
  C(R[selR], (R - cMRT$Req)[selR]);
  C(R[selR], (R * S)[selR]);
?>
// -- Reaction
  if(C < Saturation) {
    real_t Q = k * (Saturation - C);
    real_t dC = 2*Q;
    real_t dh = 2*Q/SolidConcentration;
    C += dC;  
    h += dh;
  }

<?R
  C(R[selR], (R + cMRT$Req)[selR]);
  C(c, R %*% solve(cMRT$mat), float=F);
#endregion second population
?>
}

// --- Macroscopic output quantieties ---

CudaDeviceFunction real_t getRho(){
  return <?R C(sum(f)) ?>;
}

CudaDeviceFunction real_t getP(){
  return ( <?R C(sum(f)) ?> - 1.)/3.;
}

CudaDeviceFunction real_t getC(){
  real_t C = <?R C(sum(c)) ?>;

//  real_t Q = k * (Saturation - C);
//  real_t dC = Q;
//  C += dC;  

  return C;
}

CudaDeviceFunction real_t getH(){
  return h;
}   

CudaDeviceFunction vector_t getU(){
  real_t d = <?R C(sum(f)) ?>;
  vector_t u;

  <?R C(PV(c("u.x","u.y")), f %*% U) ?>

  u.x += d*GravitationX*0.5;
  u.y += d*GravitationY*0.5;

  real_t nu = -(S2 + 1)/(6*S2 - 6);
    
  real_t K = d * 12. * nu / h / h;
    
  u.x = (u.x)/(1. + 0.5 * K) / d;
  u.y = (u.y)/(1. + 0.5 * K) / d;   

  u.z = 0.0;
  return u;
}

CudaDeviceFunction float2 Color() {
  float2 ret;
  vector_t u = getU();
  ret.x = sqrt(u.x*u.x + u.y*u.y);
  if (NodeType == NODE_Solid){
    ret.y = 0;
  } else {
    ret.y = 1;
  }
  return ret;
}